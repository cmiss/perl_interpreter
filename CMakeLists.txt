
 # ***** BEGIN LICENSE BLOCK *****
 # Version: MPL 1.1/GPL 2.0/LGPL 2.1
 #
 # The contents of this file are subject to the Mozilla Public License Version
 # 1.1 (the "License"); you may not use this file except in compliance with
 # the License. You may obtain a copy of the License at
 # http://www.mozilla.org/MPL/
 #
 # Software distributed under the License is distributed on an "AS IS" basis,
 # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 # for the specific language governing rights and limitations under the
 # License.
 #
 # The Original Code is perl interpreter
 #
 # The Initial Developer of the Original Code is
 # Auckland Uniservices Ltd, Auckland, New Zealand.
 # Portions created by the Initial Developer are Copyright (C) 2005
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s): 
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK ***** */

CMAKE_MINIMUM_REQUIRED( VERSION 2.6.2 )

# Need some way of getting CMISS_ROOT defined otherwise we are in trouble.
SET(HAVE_CMISS_ROOT NO)
IF( CMISS_ROOT )
	IF(EXISTS ${CMISS_ROOT})
		SET(HAVE_CMISS_ROOT YES)
	ENDIF(EXISTS ${CMISS_ROOT})
ELSEIF( EXISTS $ENV{CMISS_ROOT})
	SET(HAVE_CMISS_ROOT YES)
	SET(CMISS_ROOT "$ENV{CMISS_ROOT}" CACHE STRING "No help, variable specified by an environment variable.")
ENDIF( CMISS_ROOT )

IF(NOT HAVE_CMISS_ROOT)
	UNSET(CMISS_ROOT CACHE)
	MESSAGE( FATAL_ERROR "Dude there is no CMISS_ROOT environment/command line variable set" )
ENDIF(NOT HAVE_CMISS_ROOT)

# Set the CMISS_ROOT_LOCATION to CMISS_ROOT
SET(CMISS_ROOT ${CMISS_ROOT} CACHE STRING "This is where Cmgui is going to look for it's dependencies." FORCE)
FILE( TO_CMAKE_PATH "${CMISS_ROOT}" CMISS_ROOT_LOCATION )

# Using our own CMake modules first, most notably in this case a bug fix for
# FindPerlLibs.cmake
SET( CMAKE_MODULE_PATH "${CMISS_ROOT_LOCATION}/cmake/Modules" )
INCLUDE( PerlInterpreterMacros.cmake )
INCLUDE( MacroDefinitions )

# Set the project name different from the target name otherwise confusion
# insues with IDEs, thus the lack of "_" separator
PROJECT( "PerlInterpreter" )

SET( LIBRARY_NAME "perl_interpreter" )

SET( CMAKE_OSX_ARCHITECTURES i386 )
SET( CMAKE_DEBUG_POSTFIX "d" )
SET( CMAKE_MFC_FLAG 0 )

IF( WIN32 )
       SET( MAKE_PROGRAM nmake )
ELSE( WIN32 )
       SET( MAKE_PROGRAM make )
ENDIF( WIN32 )

# Define the system architecture
DEFINE_ARCHITECTURE_DIR( )
SET( BIN_ARCH_DIR ${ARCHITECTURE_DIR} )
#SET( LIB_ARCH_DIR ${CMAKE_SYSTEM_PROCESSOR}${ABI}-${OPERATING_SYSTEM} )

# Set build type and install location
CACHE_VAR_WITH_DEFAULT( PERL_INTERPRETER_INSTALL_PREFIX "${CMISS_ROOT_LOCATION}/third_party/${ARCHITECTURE_DIR}"
	PATH "Where do you want your perl interpreter libraries/executable installed?" )
SET( CMAKE_INSTALL_PREFIX ${PERL_INTERPRETER_INSTALL_PREFIX} CACHE INTERNAL "Internalise CMAKE_INSTALL_PREFIX, manipulate via CMGUI_INSTALL_PREFIX" FORCE )

CACHE_VAR_WITH_DEFAULT( PERL_INTERPRETER_BUILD_TYPE "Release" 
	STRING "What configuration do you want to build: Debug, Release, MinSizeRel, RelWithDebugInfo" )
SET( CMAKE_BUILD_TYPE ${PERL_INTERPRETER_BUILD_TYPE} CACHE INTERNAL "Internalise CMAKE_BUILD_TYPE, manipulate via CMGUI_BUILD_TYPE" FORCE )

IF( NOT DEFINED TASK )
	IF( NOT DEFINED USE_DYNAMIC_LOADER )
		SET( USE_DYNAMIC_LOADER FALSE )
	ENDIF( NOT DEFINED USE_DYNAMIC_LOADER )

	IF( NOT DEFINED SHARED_OBJECT )
		IF( WIN32 )
			SET( SHARED_OBJECT FALSE )
		ELSE( WIN32 )
			SET( SHARED_OBJECT TRUE )
		ENDIF( WIN32 )
	ENDIF( NOT DEFINED SHARED_OBJECT )

	ADD_CUSTOM_TARGET( START_PERL_INTERPRETER_BUILD ALL
		COMMAND ${CMAKE_COMMAND} -DTASK=INIT -DUSE_DYNAMIC_LOADER=${USE_DYNAMIC_LOADER} -DSHARED_OBJECT=${SHARED_OBJECT} ${CMAKE_SOURCE_DIR} 
		COMMAND ${MAKE_PROGRAM}
		COMMENT "Initialising perl interpreter build" )
ELSE( NOT DEFINED TASK )

	IF( NOT DEFINED CMISS_PERL )
		FIND_PACKAGE( Perl REQUIRED )
	ELSE( NOT DEFINED CMISS_PERL )
		SET( PERL_EXECUTABLE ${CMISS_PERL} )
	ENDIF( NOT DEFINED CMISS_PERL )
	
	IF( NOT DEFINED INCLUDE_PERL )
		SET( INCLUDE_PERL FALSE )
	ENDIF( NOT DEFINED INCLUDE_PERL )
	
	IF( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" )
		SET( DEBUG_TARGET_SUFFIX "d" )
	ENDIF( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" )
	
	FIND_PACKAGE( PerlLibs REQUIRED )
	SET( PERL_ARCHLIB_DIR ${PERL_ARCHLIB})
	GET_PERL_API_STRING( )
	#GET_PERL_ARCHLIB_DIR( )
	GET_PERL_C_FLAGS( )
	# Separate perl c flags into include directories, link
	# libraries and compiler flags.
	# Sets PERL_INCLUDE_DIRS, PERL_LINK_LIBRARIES and PERL_COMPILER_FLAGS
	SEPARATE_PERL_C_FLAGS( ${PERL_C_FLAGS} )
	
	STRING( REGEX MATCH "crypt" NEED_CRYPT_LIBRARY ${PERL_LINK_LIBRARIES} )
	IF( NEED_CRYPT_LIBRARY )
		SET( PERL_DEPENDENT_LIBS "${PERL_DEPENDENT_LIBS};crypt" CACHE
			STRING "Dependent perl libraries required for static perl library" )
	ENDIF( NEED_CRYPT_LIBRARY )
	INCLUDE_DIRECTORIES( ${PERL_INCLUDE_DIRS} )
	#SET( CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${PERL_C_FLAGS} )
	#SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${PERL_CFLAGS} )
	SET( GENERATED_FILES_DIR ${PROJECT_BINARY_DIR}/generated )
	# Need to make the directory for the output of the custom command
	FILE( MAKE_DIRECTORY ${GENERATED_FILES_DIR} )
	
	SET( CMISS_PERL_WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/Perl_cmiss/generated_cmake/${BIN_ARCH_DIR}/${PERL_API_STRING} )
	# Replace "." and "-" with underscore to make a standard character string
	STRING( REGEX REPLACE "(\\.|-)" "_" PERL_API_STRING_STANDARD_CHARACTERS ${PERL_API_STRING} )
	IF( SHARED_OBJECT )
		SET( LIBRARY_TYPE_STRING "SHARED" )
		SET( CMISS_PERL_CALLBACK_SUFFIX ${PERL_API_STRING_STANDARD_CHARACTERS} )
	ELSE( SHARED_OBJECT )
		SET( LIBRARY_TYPE_STRING "STATIC" )
		SET( CMISS_PERL_CALLBACK_SUFFIX static )
		SET( CMISS_PERL_WORKING_DIRECTORY ${CMISS_PERL_WORKING_DIRECTORY}-static )
	ENDIF( SHARED_OBJECT )
	
	SET( CMISS_PERL_CALLBACK cmiss_perl_callback_${CMISS_PERL_CALLBACK_SUFFIX} )
	
	IF( ${TASK} MATCHES "INIT" )
		IF( "${USE_DYNAMIC_LOADER}" STREQUAL "MAYBE" )
			SET( SHARED_PERL_EXECUTABLES ${PERL_EXECUTABLE} )
			FOREACH( VERSION ${PERL_VERSIONS} )
				MESSAGE( STATUS "Another perl version: ${VERSION}" )
			ENDFOREACH( VERSION ${PERL_VERSIONS} )
			SET( SHARED_PERL_API_STRINGS ${PERL_API_STRING} )
		ENDIF( "${USE_DYNAMIC_LOADER}" STREQUAL "MAYBE" )

		IF( SHARED_PERL_EXECUTABLES )
			MESSAGE( STATUS "Shared perl executables evaluated to true: ${SHARED_PERL_EXECUTABLES}" )
			SET( USE_DYNAMIC_LOADER TRUE )
		ELSE( SHARED_PERL_EXECUTABLES )
			MESSAGE( STATUS "Shared perl executables evaluated to false" )
			SET( USE_DYNAMIC_LOADER FALSE )
		ENDIF( SHARED_PERL_EXECUTABLES )
	ENDIF( ${TASK} MATCHES "INIT" )
	
	SET( SET_STATIC_PERL_LIB FALSE )
	IF( NOT SHARED_OBJECT )
		SET( SET_STATIC_PERL_LIB TRUE )
	ELSE( NOT SHARED_OBJECT )
		IF( INCLUDE_PERL )
			SET( SET_STATIC_PERL_LIB TRUE )
		ENDIF( INCLUDE_PERL )
	ENDIF( NOT SHARED_OBJECT )
	
	IF( SET_STATIC_PERL_LIB )
		SET( SOURCES source/perl_interpreter.c )
		IF( PERL_STATIC_LIBRARIES )
			SET( STATIC_PERL_LIB ${PERL_STATIC_LIBRARIES} )
		ELSE( PERL_STATIC_LIBRARIES )
			SET( STATIC_PERL_LIB ${PERL_ARCHLIB_DIR}/CORE/libperl${CMAKE_STATIC_LIBRARY_SUFFIX} )
			FILE( TO_CMAKE_PATH "${STATIC_PERL_LIB}" STATIC_PERL_LIB )
			# One last chance to find a static perl library
			IF( NOT EXISTS ${STATIC_PERL_LIB} )
				MESSAGE( STATUS "=== IMPORTANT === No static perl library found, falling back to '${PERL_LIBRARIES}' instead." )
				SET( STATIC_PERL_LIB ${PERL_LIBRARIES} )
			ENDIF( NOT EXISTS ${STATIC_PERL_LIB} )
		ENDIF( PERL_STATIC_LIBRARIES )
		FILE( TO_CMAKE_PATH "${STATIC_PERL_LIB}" STATIC_PERL_LIB )
	ELSE( SET_STATIC_PERL_LIB )
		SET( NO_STATIC_FALLBACK TRUE )
		IF( SHARED_OBJECT )
			SET( SOURCES source/perl_interpreter.c )
			SET( STATIC_PERL_LIB ${PERL_LIBRARIES} )
		ENDIF( SHARED_OBJECT )
	ENDIF( SET_STATIC_PERL_LIB )
	
	IF( USE_DYNAMIC_LOADER )
		SET( SOURCES ${SOURCES} source/perl_interpreter_dynamic.c )
		SET( BASE64_FILES ${GENERATED_FILES_DIR}/libperl_interpreter.soh )
		SET( LIBRARY_TYPE_SUFFIX "-dynamic" )
		SET( SHARED_LIB_SUFFIX "-dynamic" )
	ELSE( USE_DYNAMIC_LOADER )
		IF( EXISTS ${PERL_ARCHLIB_DIR}/auto/DynaLoader/DynaLoader${CMAKE_STATIC_LIBRARY_SUFFIX} )
			SET( DYNALOADER_LIB
				${PERL_ARCHLIB_DIR}/auto/DynaLoader/DynaLoader${CMAKE_STATIC_LIBRARY_SUFFIX} 
				CACHE STRING "Perl dynamic loader location" )
		ENDIF( EXISTS ${PERL_ARCHLIB_DIR}/auto/DynaLoader/DynaLoader${CMAKE_STATIC_LIBRARY_SUFFIX} )
		SET( PM_FILES DynaLoader.pm )
		IF( SHARED_OBJECT )
			SET( LIBRARY_TYPE_SUFFIX "-shared" )
		ELSE( SHARED_OBJECT )
			SET( LIBRARY_TYPE_SUFFIX "-static" )
		ENDIF( SHARED_OBJECT )
	ENDIF( USE_DYNAMIC_LOADER )

	# Set the Perl_cmiss library install location on a build type basis
	IF( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" )
		SET( PERL_CMISS_LIB
			${CMAKE_INSTALL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}Perl_cmiss${CMAKE_DEBUG_POSTFIX}${CMAKE_STATIC_LIBRARY_SUFFIX} )
	ELSE( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" )
		SET( PERL_CMISS_LIB
			${CMAKE_INSTALL_PREFIX}/lib/${CMAKE_STATIC_LIBRARY_PREFIX}Perl_cmiss${CMAKE_STATIC_LIBRARY_SUFFIX} )
	ENDIF( "${CMAKE_BUILD_TYPE}" STREQUAL "Debug" )
	
	IF( ${TASK} MATCHES "INIT" )
		# using the copy version for windows and linux alike
		ADD_CUSTOM_TARGET( PERL_CMISS_MAKEFILE ALL
			COMMAND ${CMAKE_COMMAND} -E make_directory Perl_cmiss
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_SOURCE_DIR}/Perl_cmiss/Makefile_cmake.PL ${PROJECT_BINARY_DIR}/Perl_cmiss/Makefile.PL 
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_SOURCE_DIR}/Perl_cmiss/perl_cmiss.h ${PROJECT_BINARY_DIR}/Perl_cmiss/perl_cmiss.h
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_SOURCE_DIR}/Perl_cmiss/Perl_cmiss.pm ${PROJECT_BINARY_DIR}/Perl_cmiss/Perl_cmiss.pm
			COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_SOURCE_DIR}/Perl_cmiss/Perl_cmiss.xs ${PROJECT_BINARY_DIR}/Perl_cmiss/Perl_cmiss.xs
			COMMAND ${CMAKE_COMMAND} -E chdir ${PROJECT_BINARY_DIR}/Perl_cmiss ${PERL_EXECUTABLE} Makefile.PL ${CMISS_PERL_CALLBACK} ${CMISS_PERL_WORKING_DIRECTORY} ${CMAKE_BUILD_TYPE}
			COMMENT "Running PERL_CMISS_MAKEFILE CMISS_PERL_CALLBACK=${CMISS_PERL_CALLBACK} WORKING_DIR=${CMISS_PERL_WORKING_DIRECTORY} ${CMAKE_BUILD_TYPE}" )
		ADD_CUSTOM_TARGET( MAKE_PERL_CMISS ALL
			COMMAND ${MAKE_PROGRAM} static
			WORKING_DIRECTORY ${CMISS_PERL_WORKING_DIRECTORY}
			COMMENT "Making ${PERL_API_STRING}${LIBRARY_TYPE_SUFFIX}" )
		ADD_DEPENDENCIES( MAKE_PERL_CMISS PERL_CMISS_MAKEFILE )

		# A budget install step to take the static library dependency
		# out of the build tree and into the install tree.
		FILE( MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}/lib )
		ADD_CUSTOM_COMMAND( TARGET MAKE_PERL_CMISS POST_BUILD
			COMMAND cmake -E copy_if_different
				${CMISS_PERL_WORKING_DIRECTORY}/auto/Perl_cmiss/Perl_cmiss${CMAKE_STATIC_LIBRARY_SUFFIX}
				${PERL_CMISS_LIB}
			COMMENT "Manually installing ${CMAKE_STATIC_LIBRARY_PREFIX}Perl_cmiss${CMAKE_STATIC_LIBRARY_SUFFIX}" )

		IF( NOT WIN32 )
			IF( NOT USE_DYNAMIC_LOADER )
				ADD_CUSTOM_TARGET( PERL_SHARED_EXECUTABLES_MAKEFILE ALL
					COMMAND ${CMAKE_COMMAND} -DTASK=INIT
					-DUSE_DYNAMIC_LOADER=MAYBE -DSHARED_OBJECT=FALSE
					-DCMISS_PERL=${PERL_EXECUTABLE} -DSHARED_PERL_API_STRINGS= ${CMAKE_SOURCE_DIR}
					COMMENT "Running PERL_SHARED_EXECUTABLES_MAKEFILE CMISS_PERL=${PERL_EXECUTABLE}"
					COMMAND ${MAKE_PROGRAM} )
				ADD_DEPENDENCIES( PERL_SHARED_EXECUTABLES_MAKEFILE PERL_CMISS_MAKEFILE )
			ENDIF( NOT USE_DYNAMIC_LOADER )
		ENDIF( NOT WIN32 )

		ADD_CUSTOM_TARGET( MAKE_LIBRARY ALL
			COMMAND ${CMAKE_COMMAND} -DUSE_DYNAMIC_LOADER=${USE_DYNAMIC_LOADER}
			-DSHARED_OBJECT=${SHARED_OBJECT} -DTASK=LIBRARY ${CMAKE_SOURCE_DIR}
			COMMAND ${MAKE_PROGRAM}
			COMMENT "Making a ${LIBRARY_TYPE_SUFFIX} perl interpreter libraryry" )
		ADD_DEPENDENCIES( MAKE_LIBRARY MAKE_PERL_CMISS )
	
	ELSE( ${TASK} MATCHES "LIBRARY" )
		FILE( MAKE_DIRECTORY ${GENERATED_FILES_DIR}/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}${LIBRARY_TYPE_SUFFIX} )
		# These are the files we want to convert to header? files
		SET( PM_FILES ${PM_FILES} strict.pm Balanced.pm Perl_cmiss.pm )
		FOREACH( PM_FILE ${PM_FILES} )
			# This is where we want the converted files to go
			SET( PMH_FILE ${GENERATED_FILES_DIR}/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}${LIBRARY_TYPE_SUFFIX}/${PM_FILE}h )
			# This is the location of the files to be converted
			SET( PM_FILE_ABSPATH ${PROJECT_SOURCE_DIR}/source/${PM_FILE} )
			# DynaLoader.pm comes from somewhere in the system
			IF( ${PM_FILE} MATCHES "DynaLoader.pm" )
				SET( PM_FILE_ABSPATH ${PERL_ARCHLIB_DIR}/DynaLoader.pm )
			ENDIF( ${PM_FILE} MATCHES "DynaLoader.pm" )
		
			# Execute the pm2pmh command, is ">" redirection portable?
			# no probably not, going for modifying pm2pmh perl script
			ADD_CUSTOM_COMMAND( OUTPUT ${PMH_FILE}
				COMMAND ${PERL_EXECUTABLE} bin2hex.pl ${PM_FILE_ABSPATH} ${PMH_FILE}
				WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/utilities )

			# Trying various ways to make CMake run this custom command before
			# compiling the source code.  Setting the generated header files directly
			# into the library compilation works, but is it the best way?
			SET_SOURCE_FILES_PROPERTIES( ${PMH_FILE} PROPERTIES HEADER_FILE_ONLY TRUE
				GENERATED TRUE )
			SET( PMH_FILES ${PMH_FILES} ${PMH_FILE} )
		ENDFOREACH( PM_FILE $PM_FILES )

		IF( USE_DYNAMIC_LOADER )
			# Execute bin2base64h command
			SET( BIN2BASE64H_EXECUTABLE_NAME bin2base64h )
			SET( CMAKE_OSX_ARCHITECTURES x86_64 )
			ADD_EXECUTABLE( ${BIN2BASE64H_EXECUTABLE_NAME} utilities/bin2base64h.c )
			SET( PERLINTERPRETER_SHARED_LIB
				${PROJECT_BINARY_DIR}/lib/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}-shared/${CMAKE_SHARED_LIBRARY_PREFIX}${LIBRARY_NAME}${DEBUG_TARGET_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX} )
			SET( PERLINTERPRETER_SHARED_LIB_HEADER ${PERLINTERPRETER_SHARED_LIB}h )
			ADD_CUSTOM_COMMAND( OUTPUT ${PERLINTERPRETER_SHARED_LIB_HEADER}
				COMMAND bin2base64h ${PERLINTERPRETER_SHARED_LIB} ${PERLINTERPRETER_SHARED_LIB_HEADER}
				DEPENDS ${BIN2BASE64H_EXECUTABLE_NAME}
				WORKING_DIRECTORY ${PROJECT_BINARY_DIR} 
				COMMENT "Hitting up a soh ${PERLINTERPRETER_SHARED_LIB_HEADER}" )
			SET_SOURCE_FILES_PROPERTIES( ${PERLINTERPRETER_SHARED_LIB_HEADER} PROPERTIES HEADER_FILE_ONLY TRUE
				GENERATED TRUE )
			CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/templates/static_version.h.template"
				"${GENERATED_FILES_DIR}/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}${LIBRARY_TYPE_SUFFIX}/static_version.h" )
			CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/templates/dynamic_versions.h.template"
				"${GENERATED_FILES_DIR}/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}${LIBRARY_TYPE_SUFFIX}/dynamic_versions.h" )
			SET( CMAKE_OSX_ARCHITECTURES i386 )
		ENDIF( USE_DYNAMIC_LOADER )
			
		SET( LIBRARY_DEFINITIONS -DPERL_VERSION_ARCHNAME=\"${PERL_API_STRING}\"
			-DABI_ENV=\"64\" -Dbool=char -DHAS_BOOL
			-DCMISS_PERL_CALLBACK=${CMISS_PERL_CALLBACK} )
		IF( WIN32 )
			SET( LIBRARY_DEFINITIONS ${LIBRARY_DEFINITIONS} -D_CRT_SECURE_NO_WARNINGS )
		ENDIF( WIN32 )
		IF( SHARED_OBJECT )
			SET( LIBRARY_DEFINITIONS ${LIBRARY_DEFINITIONS} -DSHARED_OBJECT )
		ENDIF( SHARED_OBJECT )
		IF( USE_DYNAMIC_LOADER )
			SET( LIBRARY_DEFINITIONS ${LIBRARY_DEFINITIONS} -DUSE_DYNAMIC_LOADER )
		ENDIF( USE_DYNAMIC_LOADER )
		
		ADD_DEFINITIONS( ${LIBRARY_DEFINITIONS} ${PERL_COMPILER_FLAGS} -DBUILD_WITH_CMAKE )
		INCLUDE_DIRECTORIES( ${GENERATED_FILES_DIR}/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}${LIBRARY_TYPE_SUFFIX} ${PROJECT_BINARY_DIR} )

		ADD_LIBRARY( ${LIBRARY_NAME} ${LIBRARY_TYPE_STRING} ${SOURCES}
			${PMH_FILES} ${PERLINTERPRETER_SHARED_LIB_HEADER} )
		
		TARGET_LINK_LIBRARIES( ${LIBRARY_NAME} ${DYNALOADER_LIB}
			${STATIC_PERL_LIB} ${PERL_CMISS_LIB} )

		IF( DEFINED DEBUG_TARGET_SUFFIX )
			SET_TARGET_PROPERTIES( ${LIBRARY_NAME} PROPERTIES DEBUG_POSTFIX ${DEBUG_TARGET_SUFFIX} )
		ENDIF( DEFINED DEBUG_TARGET_SUFFIX )
		SET( LIBRARY_OUTPUT_LOCATION ${CMAKE_BINARY_DIR}/lib/${BIN_ARCH_DIR}/${PERL_API_STRING}${DEBUG_TARGET_SUFFIX}${LIBRARY_TYPE_SUFFIX} )
		IF( ${LIBRARY_TYPE_STRING} MATCHES "SHARED" )
			SET_TARGET_PROPERTIES( ${LIBRARY_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_LOCATION} )
			SET_TARGET_PROPERTIES( ${LIBRARY_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_LOCATION} )
		ENDIF( ${LIBRARY_TYPE_STRING} MATCHES "SHARED" )
		IF( ${LIBRARY_TYPE_STRING} MATCHES "STATIC" )
			SET_TARGET_PROPERTIES( ${LIBRARY_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_LOCATION} )
		ENDIF( ${LIBRARY_TYPE_STRING} MATCHES "STATIC" )

		INSTALL( TARGETS ${LIBRARY_NAME} EXPORT ${LIBRARY_NAME}-targets 
			DESTINATION ${CMAKE_INSTALL_PREFIX}/lib )
		IF( WIN32 )
			INSTALL( FILES ${LIBRARY_OUTPUT_LOCATION}/perl_interpreter${CMAKE_DEBUG_POSTFIX}.pdb 
				DESTINATION ${CMAKE_INSTALL_PREFIX}/lib 
				CONFIGURATIONS Debug )
		ENDIF( WIN32 )
		INSTALL( FILES ${CMAKE_SOURCE_DIR}/source/perl_interpreter.h DESTINATION ${CMAKE_INSTALL_PREFIX}/include/perl_interpreter )
		INSTALL( EXPORT ${LIBRARY_NAME}-targets 
			DESTINATION lib/cmake )
		
		STRING( TOUPPER ${LIBRARY_NAME} UPPERCASE_LIBRARY_NAME )
		SET( CONFIG_FILE_CONTENTS 
			"\nIF( NOT DEFINED _${UPPERCASE_LIBRARY_NAME}_CONFIG_CMAKE )"
			"\nSET( _${UPPERCASE_LIBRARY_NAME}_CONFIG_CMAKE TRUE )"
			"\nGET_FILENAME_COMPONENT( SELF_DIR \"\${CMAKE_CURRENT_LIST_FILE}\" PATH )"
			"\nINCLUDE( \${SELF_DIR}/${LIBRARY_NAME}-targets.cmake )"
			"\nGET_FILENAME_COMPONENT( ${UPPERCASE_LIBRARY_NAME}_INCLUDE_DIRS \"\${SELF_DIR}/../../include/perl_interpreter\" ABSOLUTE )"
			"\nSET( ${UPPERCASE_LIBRARY_NAME}_LIBRARIES ${LIBRARY_NAME} )"
			"\nSET( ${UPPERCASE_LIBRARY_NAME}_FOUND TRUE )" 
			"\nENDIF( NOT DEFINED _${UPPERCASE_LIBRARY_NAME}_CONFIG_CMAKE )"
			"\n\n" )

		SET( CONFIG_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_NAME}-config.cmake )
		FILE( WRITE ${CONFIG_FILE_NAME} ${CONFIG_FILE_CONTENTS} )
		INSTALL( FILES ${CONFIG_FILE_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/cmake )

	ENDIF( ${TASK} MATCHES "INIT" )
ENDIF( NOT DEFINED TASK )



