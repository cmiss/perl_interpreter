
MACRO( IS_PERL_VARIABLE_DEFINED VAR )
	SET( STR_CONFIG "Config" )
	SET( VARIABLE_DEFINED FALSE )
	EXECUTE_PROCESS( COMMAND ${PERL_EXECUTABLE} -MConfig -e print -e "$${STR_CONFIG}{\"use${VAR}\"}"
	 OUTPUT_VARIABLE PERL_OUTPUT_VARIABLE
		 ERROR_VARIABLE PERL_ERROR_VARIABLE
		 RESULT_VARIABLE PERL_RETURN_VARIABLE )
	IF( NOT PERL_RETURN_VALUE AND PERL_OUTPUT_VARIABLE )
		SET( VARIABLE_DEFINED TRUE )
	ENDIF( NOT PERL_RETURN_VALUE AND PERL_OUTPUT_VARIABLE )

	SET( PERL_OUTPUT_VARIABLE )
	SET( PERL_ERROR_VARIABLE )
	SET( PERL_RETURN_VARIABLE )
	SET( STR_CONFIG )
ENDMACRO( IS_PERL_VARIABLE_DEFINED VAR )

MACRO( GET_PERL_C_FLAGS )
	EXECUTE_PROCESS(COMMAND ${PERL_EXECUTABLE} -MExtUtils::Embed -e ccopts -e ldopts
		OUTPUT_VARIABLE PERL_OUTPUT_VARIABLE
		ERROR_VARIABLE PERL_ERROR_VARIABLE
		RESULT_VARIABLE PERL_RETURN_VARIABLE )
	IF( NOT PERL_RETURN_VARIABLE )
		FILE( TO_CMAKE_PATH "${PERL_OUTPUT_VARIABLE}" PERL_C_FLAGS )
		#SET( PERL_C_FLAGS ${PERL_OUTPUT_VARIABLE} )
	ELSE( NOT PERL_RETURN_VARIABLE )
		MESSAGE( ERROR "Problem with perl: ${PERL_ERROR_VARIABLE}" )
	ENDIF( NOT PERL_RETURN_VARIABLE )

	SET( PERL_OUTPUT_VARIABLE )
	SET( PERL_ERROR_VARIABLE )
	SET( PERL_RETURN_VARIABLE )
ENDMACRO( GET_PERL_C_FLAGS )

MACRO( GET_PERL_ARCHLIB_DIR )
	SET( STR_CONFIG "Config" )
	EXECUTE_PROCESS(COMMAND ${PERL_EXECUTABLE} -MConfig -e print -e "$${STR_CONFIG}{installarchlib}"
		OUTPUT_VARIABLE PERL_OUTPUT_VARIABLE
		ERROR_VARIABLE PERL_ERROR_VARIABLE
		RESULT_VARIABLE PERL_RETURN_VARIABLE )

	IF( NOT PERL_RETURN_VARIABLE )
		SET( PERL_ARCHLIB_DIR ${PERL_OUTPUT_VARIABLE} )
	ENDIF( NOT PERL_RETURN_VARIABLE )

	SET( PERL_OUTPUT_VARIABLE )
	SET( PERL_ERROR_VARIABLE )
	SET( PERL_RETURN_VARIABLE )
	SET( STR_CONFIG )
ENDMACRO( GET_PERL_ARCHLIB_DIR )

MACRO( GET_PERL_API_STRING LOCAL_PERL_EXECUTABLE )
	# Have to set this string because cmake will interfere with
	# $Config
	SET( STR_CONFIG "Config" )
	EXECUTE_PROCESS(COMMAND ${LOCAL_PERL_EXECUTABLE} -MConfig -e print -e "$${STR_CONFIG}{api_versionstring}"
	 OUTPUT_VARIABLE PERL_OUTPUT_VARIABLE
		 ERROR_VARIABLE PERL_ERROR_VARIABLE
		 RESULT_VARIABLE PERL_RETURN_VARIABLE )
	IF( NOT PERL_RETURN_VARIABLE )
		SET( PERL_API_STRING ${PERL_OUTPUT_VARIABLE} )
		SET( PERL_VARIABLES threads multiplicity 64bitall longdouble perlio )
		FOREACH( VARIABLE ${PERL_VARIABLES} )
			IS_PERL_VARIABLE_DEFINED( ${VARIABLE} )
			IF( VARIABLE_DEFINED )
				SET( PERL_API_STRING ${PERL_API_STRING}-${VARIABLE} )
			ENDIF( VARIABLE_DEFINED )
		ENDFOREACH( VARIABLE ${PERL_VARIABLES} )

		SET( VARIABLE_DEFINED )
	ELSE( NOT PERL_RETURN_VARIABLE )
		MESSAGE( ERROR "Problem with perl: ${PERL_ERROR_VARIABLE}" )
	ENDIF( NOT PERL_RETURN_VARIABLE )

	SET( PERL_OUTPUT_VARIABLE )
	SET( PERL_ERROR_VARIABLE )
	SET( PERL_RETURN_VARIABLE )
	SET( STR_CONFIG )
ENDMACRO( GET_PERL_API_STRING )

MACRO( GET_PERL_ARCHLIB_DIR LOCAL_PERL_EXECUTABLE )
	EXECUTE_PROCESS(
		COMMAND ${LOCAL_PERL_EXECUTABLE} -V:installarchlib
		OUTPUT_VARIABLE PERL_ARCHLIB_OUTPUT_VARIABLE
		RESULT_VARIABLE PERL_ARCHLIB_RESULT_VARIABLE
	)
	IF( NOT PERL_ARCHLIB_RESULT_VARIABLE )
		STRING(REGEX REPLACE "install[a-z]+='([^']+)'.*" "\\1" PERL_ARCHLIB_DIR ${PERL_ARCHLIB_OUTPUT_VARIABLE})
		#perl_adjust_darwin_lib_variable( PERL_ARCHLIB_DIR )
		FILE( TO_CMAKE_PATH ${PERL_ARCHLIB_DIR} PERL_ARCHLIB_DIR )
	ENDIF( NOT PERL_ARCHLIB_RESULT_VARIABLE )
ENDMACRO()

MACRO( SEPARATE_PERL_C_FLAGS C_FLAGS )
	# Strip out all include directory information and set into PERL_INCLUDE_DIRS
	IF ( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]-I\"[^\"]+\"" TMP_INCLUDE_DIRS ${C_FLAGS} )
	ELSE ( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]-I[^ \t\r\n]+" TMP_INCLUDE_DIRS ${C_FLAGS} )
	ENDIF ( DEFINED WIN32 )

	FOREACH( DIR ${TMP_INCLUDE_DIRS} )
		IF ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n]-I\"([^\"]+)\"" TMP_INCLUDE_DIR ${DIR} )
		ELSE ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n]-I([^ \t\r\n]+)" TMP_INCLUDE_DIR ${DIR} )
		ENDIF ( DEFINED WIN32 )
		SET( PERL_INCLUDE_DIRS ${PERL_INCLUDE_DIRS} ${CMAKE_MATCH_1} )
	ENDFOREACH( DIR ${TMP_INCLUDE_DIRS} )

	# Strip out all link information and set into PERL_LINK_LIBRARY_DIRS
	IF ( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]-libpath:[^ \t\r\n]+" TMP_LINK_LIBRARY_DIRS ${C_FLAGS} )
	ELSE ( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]-L[^ \t\r\n]+" TMP_LINK_LIBRARY_DIRS ${C_FLAGS} )
	ENDIF ( DEFINED WIN32 )

	FOREACH( DIR ${TMP_LINK_LIBRARY_DIRS} )
		IF ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n]-libpath:([^ \t\r\n]+)" TMP_LIBRARY_DIR ${DIR} )
		ELSE ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n]-L([^ \t\r\n]+)" TMP_LIBRARY_DIR ${DIR} )
		ENDIF ( DEFINED WIN32 )
		SET( PERL_LINK_LIBRARY_DIRS ${PERL_LINK_LIBRARY_DIRS} ${CMAKE_MATCH_1} )
	ENDFOREACH( DIR ${TMP_LINK_LIBRARY_DIRS} )

	# Strip out all link information and set into PERL_LINK_LIBRARIES
	IF ( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]([^ \t\r\n]+[.]lib|\"[^\"]+[.]lib\")" TMP_LINK_LIBRARIES ${C_FLAGS} )
	ELSE ( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]-l[^ \t\r\n]+" TMP_LINK_LIBRARIES ${C_FLAGS} )
	ENDIF ( DEFINED WIN32 )

	FOREACH( LIB ${TMP_LINK_LIBRARIES} )
		IF ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n]\"([^\"]+[.]lib)\"" TMP_LIBRARY ${LIB} )
			IF ( NOT CMAKE_MATCH_1 )
				STRING( REGEX MATCH "[ \t\r\n]([^ \t\r\n]+[.]lib)" TMP_LIBRARY ${LIB} )
			ENDIF ( NOT CMAKE_MATCH_1 )
		ELSE ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n]-l([^ \t\r\n]+)" TMP_LIBRARY ${LIB} )
		ENDIF ( DEFINED WIN32 )
		SET( PERL_LINK_LIBRARIES ${PERL_LINK_LIBRARIES} ${CMAKE_MATCH_1} )
	ENDFOREACH( LIB ${TMP_LINK_LIBRARIES} )

	# Strip out all c flags and set into PERL_COMPILER_FLAGS, just looking at the defines for now
	IF( DEFINED WIN32 )
		STRING( REGEX MATCHALL "[ \t\r\n]-[D][^ \t\r\n]+" TMP_COMPILER_FLAGS ${C_FLAGS} )
	ENDIF( DEFINED WIN32 )

	FOREACH( FLAG ${TMP_COMPILER_FLAGS} )
		IF ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n](-[D][^ \t\r\n]+)" TMP_FLAG ${FLAG} )
		ELSE ( DEFINED WIN32 )
			STRING( REGEX MATCH "[ \t\r\n](-D[^ \t\r\n]+)" TMP_FLAG ${FLAG} )
		ENDIF ( DEFINED WIN32 )
		SET( PERL_COMPILER_FLAGS ${PERL_COMPILER_FLAGS} ${CMAKE_MATCH_1} )
	ENDFOREACH( FLAG ${TMP_COMPILER_FLAGS} )

	SET( TMP_INCLUDE_DIRS )
	SET( TMP_INCLUDE_DIR )
	SET( TMP_LINK_LIBRARY_DIR )
	SET( TMP_LIBRARY_DIR )
	SET( TMP_LINK_LIBRARIES )
	SET( TMP_LIBRARY )
	SET( TMP_COMPILER_FLAGS )
	SET( TMP_FLAG )
ENDMACRO( SEPARATE_PERL_C_FLAGS )

